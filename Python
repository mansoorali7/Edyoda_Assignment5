OOP Assignment
Challenge 1: Square Numbers and Return Their Sum
ðŸ”´ In this challenge, you need to implement a method that squares passing variables and returns their sum.

Problem statement: Implement a class Point that has three properties and a method. All these attributes (properties and methods) should be public. This problem can be broken down into two tasks:

Task 1: ðŸ‘‰ Implement a constructor to initialize the values of three properties: x, y, and z.

Task 2: ðŸ‘‰ Implement a method, sqSum(), in the Point class which squares x, y, and z and returns their sum.

Sample properties 1, 3, 5

Sample method output 35


class Point:

    def __init__(self, x,y,z):
        self.x = x
        self.y = y
        self.z = z

    def sqSum(self):

        return  self.x**2 + self.y**2 + self.z**2
    
    
p = Point(1,3,5)
print(p.sqSum())
_____________________________________________________________________________________________________________________________________________________________________________________________________________________

Challenge 2: Implement a Calculator Class
ðŸ”´ In this exercise, you have to implement a calculator that can perform addition, subtraction, multiplication, and division.

Problem statement Write a Python class called Calculator by completing the tasks below:

Task 1

ðŸ‘‰ Initializer

Implement an initializer to initialize the values of num1 and num2. Properties

â€¢ num1
â€¢ num2
Task 2

ðŸ‘‰ Methods

â€¢ add() is a method that returns the sum of num1 and num2.
â€¢ subtract() is a method that returns the subtraction of num1 from num2.
â€¢ multiply() is a method that returns the product of num1 and num2.
â€¢ divide() is a method that returns the division of num2 by num1.
Input - Pass numbers (integers or floats) in the initializer.

Output - addition, subtraction, division, and multiplication

Sample input

obj = Calculator(10, 94)
obj.add()
obj.subtract()
obj.multiply()
obj.divide()

class calculator:

    def __init__(self, num1, num2):
        self.num1 = num1
        self.num2 = num2

    def addition(self):
        return self.num1 + self.num2
    
    def subtraction(self):
        return self.num1 - self.num2
    
    
    def multiplication(self):
        return self.num1 * self.num2
    
    def division(self):
        return self.num2/ self.num1
    
cal = calculator(10,94)
print(cal.addition())
print(cal.subtraction())
print(cal.multiplication())
print(cal.division())

_____________________________________________________________________________________________________________________________________________________________________________________________________________________

Challenge 3: Implement the Complete Student Class
ðŸ”´In this challenge, you will implement a student class
Problem statement

Implement the complete Student class by completing the tasks below

Task

ðŸ‘‰ Implement the following properties as private:

â€¢ name
â€¢ rollNumber
ðŸ‘‰ Include the following methods to get and set the private properties above:

â€¢ getName()
â€¢ setName()
â€¢ getRollNumber()
â€¢ setRollNumber()
ðŸ‘‰ Implement this class according to the rules of encapsulation.

Input - Checking all the properties and methods

Output - Expecting perfectly defined fields and getter/setters

Note: Do not use initializers to initialize the properties. Use the set methods to do so.

If the setter is not defined properly, the corresponding getter will also generate an error even if the getter is defined properly.

class Student:
    
   def __init__(self):
      self.__name = "Mansoor"
      self.__rollno= 1234

   def set_name(self, your_name):
      self.__name = your_name

   def get_name(self):
      print(self.__name)
    #   return self.__name

   def set_Rollno(self, rollno):
      self.__rollno = rollno
    
   def get_Rollno(self):
      print(self.__rollno)
    #   return self.__roll__number

std =Student()
std.get_name()
std.set_name("Tinku")
std.get_name()

____________________________________________________________________________________________________________________________________________________________________________________________________________________

#CHALLANGE4 SOLUTION

class Account:
    def __init__(self, title, balance):
        self.title = title
        self.balance = balance

class SavingsAccount(Account):
    def __init__(self, title, balance, interestRate):
        super().__init__(title, balance)
        self.interestRate = interestRate


account = Account("Mansoor", 5000)
print(account.title)    
print(account.balance)  

savings_account = SavingsAccount("Tinku", 5000, 5)
print(savings_account.title)        
print(savings_account.balance)      
print(savings_account.interestRate) 

_____________________________________________________________________________________________________________________________________________________________________________________________________________________

#CHALLANGE5 SOLUTION

class Account:
    def __init__(self, title=None, balance=0):
        self.title = title
        self.balance = balance
    
    def withdrawal(self, amount):
        self.balance -= amount

    def deposit(self, amount):
        self.balance += amount
    
    def getBalance(self):
        return self.balance


class SavingsAccount(Account):
    def __init__(self, title=None, balance=0, interestRate=0):
        super().__init__(title, balance)
        self.interestRate = interestRate
    
    def interestAmount(self):
          return (self.balance * self.interestRate) / 100



demo1 = SavingsAccount("Mansoor", 2000, 5)
demo1.deposit(500)
print(demo1.getBalance())  
demo1.withdrawal(500)
print(demo1.getBalance())  
print(demo1.interestAmount()) 
